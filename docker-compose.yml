services:
  web: 
    build: .
    container_name: django_app
    ports:
      - 8000:8000
    volumes:
      - ./src:/app
      - /var/run/docker.sock:/var/run/docker.sock 
      - shared_code:/shared
    depends_on:
      db:
        condition: service_healthy
        restart: true
      redis:
        condition: service_started

    env_file:
      - .env
        
  db:
    image: postgres:17
    container_name: postgres_db
    volumes: 
      - postgres_db:/var/lib/postgresql/data/ 
    environment:
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 10s
      retries: 5
      start_period: 30s
      timeout: 10s
  
  redis:
    image: redis:latest
    container_name: redis_server
    ports:
     - '6379:6379'
  
  celery:
    build: .
    container_name: celery_worker
    command: celery -A app worker -l info
    volumes:
      - ./src:/app
      - /var/run/docker.sock:/var/run/docker.sock
    depends_on:
      - redis
      - db
    env_file:
      - .env
    restart: always

  docker_python:
    build:
      context: ./src/models/executor
      dockerfile: Dockerfile.python
    container_name: docker_python
    volumes:
      - shared_code:/shared

  docker_cpp:
    build:
      context: ./src/models/executor
      dockerfile: Dockerfile.cpp
    container_name: docker_cpp
    volumes:
      - shared_code:/shared

  docker_js:
    build:
      context: ./src/models/executor
      dockerfile: Dockerfile.js
    container_name: docker_js
    volumes:
      - shared_code:/shared

volumes: 
    postgres_db: 
    shared_code: